Graph Traversals

There are many ways to traverse a graph, but you will focus on three methods: depth-first search (DFS), breadth-first search (BFS), and Dijkstra’s algorithm. These traversal methods are core algorithms for searching a graph.

Depth-First Search
Simply put, a depth-first graph search continues down a path until it reaches the end. It is helpful for determining if a path exists between two vertices. DFS has many applications, including topological sorting and detecting cycles, but one of the more interesting real-world applications is that it can be used to solve problems that have a singular correct answer (a path between the start state and end state), such as a sudoku exercise.

Breadth-First Search
On the other hand, a breadth-first graph search approach checks the values of all neighboring vertices before moving into another level of depth. This is an incredibly inefficient way to find just any path between two vertices, but it’s an excellent way to identify the shortest path between them. Because of this, BFS is helpful for figuring out directions from one place to another.

Dijkstra’s Algorithm
Dijkstra’s algorithm is a method for finding the shortest distance from a given point to every other point in a weighted graph. The algorithm works by keeping track of all the distances and updating the distances as it conducts a breadth-first search. A common application of this algorithm is to find the quickest route from one destination to another.

Graph Search Conceptual Introduction
Using graphs to model complex networks is pretty swell, but one way that graphs can really come in handy is with graph search algorithms. You can use a graph search algorithm to traverse the entirety of a graph data structure in search of a specific vertex value.

There are two common approaches to using a graph search to progress through a graph:

depth-first search, known as DFS follows each possible path to its end
breadth-first search, known as BFS broadens its search from the point of origin to an ever-expanding circle of neighboring vertices
To enable searching, we add vertices to a list, visited. This list is pretty important because it keeps the search from visiting the same vertex multiple times! This is particularly vital for cyclical graphs where you might otherwise end up in an infinite loop.

So how do you calculate the runtime for graph search algorithms?

In an upper bound scenario, we would be looking at every vertex and every edge. Because of this, the big O runtime for both depth-first search and breadth-first search is O(vertices + edges).

BFS - best for densely interconnected graph
DFS - best for long graph with fewer connections

Video resource
https://www.youtube.com/watch?time_continue=152&v=swpIQgPoCWs&feature=emb_title

Depth-First Search (DFS) Conceptual
Imagine you’re in a car, on the road with your friend, “D.” D is on a mission to get to your destination by process of elimination. D won’t stop and ask for directions. D just sticks to a chosen path until you reach the end.

At that point, if the end wasn’t actually your destination, D brings you back to the last point when there was an intersection and tries another path.

Like your friend D, depth-first search algorithms check the values along a path of vertices before moving to another path.

While this isn’t exactly ideal when you want to find the shortest path between two points, DFS can be very helpful for determining if a path even exists.

In order to accomplish this path-finding feat, DFS implementations use either a stack data structure or, more commonly, recursion to keep track of the path the search is on and the current vertex.

In a stack implementation, the most recently added vertex is popped off the stack when the search has reached the end of the path. Meanwhile, in a recursive implementation, the DFS function is recursively called for each connected vertex.


Video resource
https://www.youtube.com/watch?time_continue=2&v=0_ZzqX5bpyA&feature=emb_title

Breadth-First Search (BFS) Conceptual
You’re back in a car, but this time, your friend “B” is navigating. Unlike D, B is a bit hesitant about whether you’ve gone the right way and keeps checking in to see if you are on the best path. At each intersection, B tries out each possible route one by one, but only for a block in each direction to see if you’ve found your destination.

Like B, breadth-first search, known as BFS, checks the values of all neighboring vertices before moving into another level of depth.

This is an incredibly inefficient way to find just any path between two points, but it’s an excellent way to identify the shortest path between two vertices. Because of this, BFS is helpful for figuring out directions from one place to another.

Unlike DFS, BFS graph search implementations use a queue data structure to keep track of the current vertex and vertices that still have unvisited neighbors. In BFS graph search a vertex is dequeued when all neighboring vertices have been visited.

Instructions
Watch the video to see a breadth-first search in action, then take a look at the city map below. How could you use BFS to find the shortest walking route between Casa Batlló and the Sagrada Familia?

Video resource
https://www.youtube.com/watch?v=WiasVg9M81I

Graph Search Traversal Order
What if you don’t need to find a path, but you do need to get a list of all the values in a graph?

Well, it turns out that in addition to path-finding, depth-first search is pretty adept at organizing vertices (or vertex values) with a clear order of visitation from beginning to end.

There are three main traversal orders that you’ll come across for graph traversal:

Preorder, in which each vertex is added to the “visited” list and added to the output list BEFORE getting added to the stack
Postorder, in which each vertex is added to the “visited” list and added to the output list AFTER it is popped off the stack
Reverse Post-Order (also known as Topological Sort), which returns an output list that is exactly the reverse of the post-order list
Take a look at the directed graph structure we have depicted here. Let’s say that we want a list of all vertex values, starting with “Lasers”, in the order that they are added to the stack.

A pre-order DFS traversal would come in handy and we might end up with the following list. (We’ll assume here that this algorithm prefers visiting things in alphabetical order if there is a choice.):

["Lasers", "Lava", "Snakes", "Spikes", "Piranhas"]
Now, let’s say we want the same values, but with each value only added to the list once its vertex has been popped from the stack. In this case, our post-order DFS traversal would result in a list that looked like:

["Spikes", "Snakes", "Lava", "Piranhas", "Lasers"]
You may notice that the post-order list is not the reverse of the pre-order list. A reverse post-order list would still begin with “Lasers”, but then begin to differ:

["Lasers", "Piranhas", "Lava", "Snakes", "Spikes"]
What happens if there are unvisited vertices that are not reachable from the current path? The search would visit them in (here alphabetical) order after exploring the current path.

Instructions
What would the resulting lists look like from pre-order, post-order, and reverse post-order DFS traversals if the origin vertex were “Spikes”?

Graph Search Conceptual Review
You’ve learned a bunch about graph searches and how to use them effectively:

You can use a graph search algorithm to traverse the entirety of a graph data structure to locate a specific value
Vertices in a graph search include a “visited” list to keep track of whether or not each vertex has been checked
Depth-first search (DFS) and breadth-first search (BFS) are two common approaches to graph search
The runtime for graph search algorithms is O(vertices + edges)
DFS, which employs either recursion or a stack data structure, is useful for determining whether a path exists between two points
BFS, which generally relies on a queue data structure, is helpful in finding the shortest path between two points
There are three common traversal orders which you can apply with DFS to generate a list of all values in a graph: pre-order, post-order, and reverse post-order
Instructions
If you were to build a GPS system, how could each type of graph search be useful? What map-routing factors do these algorithms not take into consideration when path-finding?

Quiz: Graph Search: Conceptual

Which graph traversal could have given you this list?
["sharks", "bees", "crocodiles", "sharks (reprise)", "piranhas", "lava", "fire pit", "blow torches", "lasers"]
NOTE: that this graph is undirected, so the search could move just as easily from “crocodiles” to “sharks” as the reverse. You can assume that the search will use alphabetical order to choose between two potential next vertices.

=> A pre-order traversal adds each value to the list before it is added to the stack; A pre-order traversal beginning with "sharks"; This is a pre-order traversal beginning with “sharks”. A post-order traversal beginning with “sharks” would look like ["sharks", “lava”, “fire pit“, “lasers”, “blowtorches”, “crocodiles”, “sharks (reprise)”, “piranhas”, “bees”].

You can use a graph search algorithm to __.
=> traverse the entirety of a graph data structure to locate a specific value; 
Graph search can also be used to put graph values into a linear list.

In order to keep track of vertices throughout its search, DFS employs the use of a __ data structure.
=> stack; Depth-first search can also use recursion to keep track of vertices.

In order to keep track of vertices throughout its search, BFS employs the use of a __ data structure.
=> queue; breadth-first search uses a queue data structure to keep track of vertices.

Given a vertex in an acyclic graph, what conditions must be satisfied before it can be visited in a depth first traversal?
=> The vertext's parent has been visited, but the vertex has not yet been visited; The vertices to be queued up for visiting are taken from the parent’s neighbors, and we don’t want to unnecessarily visit vertices that have already been visited.

In our implementation of breadth first traversal, what is the difference between the visitedVertices and visitQueue?
=> The visitedVertices track the vertices that have been visited, but the visitQueue maintains the order of vertices to visit next.

Given a vertex in an acyclic graph, what conditions must be satisfied before it can be visited in a breadth first traversal?
=> The vertex's parent and parent's siblings have been visited, but the vertex has not yet been visited ; Breadth first traversal occurs in layers, where all parents and its siblings must be visited before any of the neighbors.

In our implementation of breadth first traversal, the visit queue maintains vertices that have yet to be visited. If another data structure was used instead of the queue, what must the new data structure be able to do?
=> Maintain the same order that the vertices were put in the data structure; The order needs to be maintained to ensure the vertices are visited by layers.

In our implementation of depth first traversal, what is the purpose of maintaining the visitedVertices?
=> Ensure that we do not traverse down the same vertex more than once; This is particularly useful to prevent infinite loops when the traversal encounters a cycle, or when a vertex’s neighbor is a vertex that has already been visited.

Additional Resources:

Interactive: Graph Traversal
https://visualgo.net/en/dfsbfs?slide=1

Code Challenges:

Beginner - Find the Town Judge
https://leetcode.com/problems/find-the-town-judge/

Beginner - Find Center of Star Graph
https://leetcode.com/problems/find-center-of-star-graph/

Intermediate - Clone Graph
https://leetcode.com/problems/clone-graph/