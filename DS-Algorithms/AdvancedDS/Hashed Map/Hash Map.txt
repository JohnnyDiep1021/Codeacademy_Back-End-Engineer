Hash maps map keys to their related values, and are one of the most efficient data structures when it comes to retrieving stored data. This is because the key associated with every value added allows for faster retrieval later on. When you come across a coding problem that requires you to store and retrieve data, keep in mind that hash maps will often be the most efficient data structure for that scenario.

Hash map: A key-value store that uses an array and a hashing function to save and retrieve values.
Key: The identifier given to a value for later retrieval.

Hash function: A function that takes some input and returns a number. This function is said to be deterministic. That means the hashing function must always return the same index when given the same key. This is important because we will need to hash the key again later to retrieve the stored value.

The hashing function should follow this logic:

declare hashCode variable with value of 0
for each character in the key
  add the sum of the current character code value and hashCode to hashCode
return hashCode

Adding the sum of hashCode and the character code to the hashCode again creates a deterministic and also non-reversible implementation of a hashing function. This avoids generating a duplicate index if keys have the same characters in different orders, such as bat and tab.

Compression function: A function that transforms its inputs into some smaller range of possible outputs.

The updated .hash() should follow these steps:
initialize hashCode variable to 0
for each character in the key
   add the character code and hashCode to hashCode
return compressed hashCode


collision: When two different keys resolve to the same array index this is called a collision.

=> Solution: use linked lists and nodes inside the hashmap array. This will allow us to store multiple values at the same index by adding new nodes to a linked list instead of overwriting a single value. This strategy of handling collisions is called separate chaining.

Recipe for saving to a hash table:
- Take the key and plug it into the hash function, getting the hash code.
- Modulo that hash code by the length of the underlying array, getting an array index.
- Check if the array at that index is empty, if so, save the value (and the key) there.
- If the array is full at that index continue to the next possible position depending on your collision strategy.

Recipe for retrieving from a hash table:
- Take the key and plug it into the hash function, getting the hash code.
- Modulo that hash code by the length of the underlying array, getting an array index.
- Check if the array at that index has contents, if so, check the key saved there.
- If the key matches the one you're looking for, return the value.
- If the keys don't match, continue to the next position depending on your collision strategy.

Review
We’ve learned together what a hash map is and how to create one. Let’s go over the concepts presented in this lesson.

A hash map is:

Built on top of an array using a special indexing system.
A key-value storage with fast assignments and lookup.
A table that represents a map from a set of keys to a set of values.
Hash maps accomplish all this by using a hash function, which turns a key into an index into the underlying array.

A hash collision is when a hash function returns the same index for two different keys.

There are different hash collision strategies. Two important ones are separate chaining, where each array index points to a different data structure, and open addressing, where a collision triggers a probing sequence to find where to store the value for a given key.

Hash maps are data structures that serve as efficient key-value stores. They are capable of assigning and retrieving data in the fastest way possible. This is because the underlying data structure that hash maps use is an array.

A value is stored at an array index determined by plugging the key into a hash function. Because we always know exactly where to find values in a hash map, we have constant access to any of the values it contains.

This quick access to values makes a hash map a good choice of data structure whenever we need to store a lot of values but need fast look-up time.

Additional Resources:

Visualizer: Hash Maps
https://visualgo.net/en/hashtable?slide=1

Video: Hash Maps
https://www.youtube.com/watch?v=QuFPIZj55hU&feature=emb_title

Cheatsheet: Hash Maps
https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/hash-table